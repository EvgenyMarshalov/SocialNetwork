{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","s","dialog","active","to","activeClassName","activeLink","name","Message","message","maxLengt50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","dialogsItems","values","sendMessage","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,2B,kICGvNC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,S,qECORE,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAMO,gBAAiBJ,IAAEK,WAAtC,SAAmDT,EAAMU,UCCtDC,EANC,SAACX,GACb,OACI,qBAAKG,UAAWC,IAAEQ,QAAlB,SAA4BZ,EAAMY,WCiCpCC,EAAaC,YAAiB,IAgB9BC,EAAsBC,YAAU,CAElCC,KAAM,wBAFkBD,EAdL,SAAChB,GACpB,OACA,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,iBAAiBa,YAAY,qBAC9DC,SAAU,CAACC,IAAUZ,OAEzB,8BACI,kDAWGa,EAlDC,SAAC1B,GAEb,IAAIJ,EAAQI,EAAM2B,YAEdC,EAAkBhC,EAAMiC,QACvBC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBR,GAAI6B,EAAE7B,IAAZ6B,EAAE7B,OAC3C8B,EAAmBpC,EAAMqC,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAEhC,OAC9DN,EAAMuC,eAO3B,OAAKnC,EAAMH,OAGP,sBAAKM,UAAWC,IAAEyB,QAAlB,UACI,qBAAK1B,UAAWC,IAAEgC,aAAlB,SACMR,IAEN,qBAAKzB,UAAWC,IAAE6B,SAAlB,SACI,8BAAOD,MAEX,cAACjB,EAAD,CAAqBG,SAdT,SAACmB,GACjBrC,EAAMsC,YAAYD,EAAOF,sBAGH,cAAC,IAAD,CAAU5B,GAAI,YCM7BgC,sBACXC,aAtBoB,SAAC5C,GACrB,MAAO,CACH+B,YAAa/B,EAAM+B,gBAIA,SAACc,GACxB,MAAO,CAIHH,YAAa,SAACH,GACVM,EAASC,YAAmBP,UJXR,SAACQ,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAK7C,MAAMH,OACT,cAAC8C,EAAD,eAAeE,KAAK7C,QADI,cAAC,IAAD,CAAUO,GAAI,eAHV,GACXuC,IAAMH,WAStC,OAFqCH,YAAQ7C,EAAR6C,CAAqCI,KIY/DL,CAGZb","file":"static/js/4.d1c395c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__18iL7\",\"dialogsItems\":\"Dialogs_dialogsItems__rCQIk\",\"active\":\"Dialogs_active__1w2ic\",\"activeLink\":\"Dialogs_activeLink__2SJH6\",\"messages\":\"Dialogs_messages__1vViA\",\"message\":\"Dialogs_message__Jceyy\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n","import s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path} activeClassName={s.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Textarea } from '../Common/FormControls/FormsControls';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n    \r\n  \r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'} />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLengt50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name='newMessageBody' placeholder='Enter your message'\r\n            validate={[required, maxLengt50]} />\r\n        </div>\r\n        <div>\r\n            <button>Send</button>\r\n        </div>\r\n    </form>\r\n    );\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'dialogAddMessageForm'\r\n}) (AddMessageForm)\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // updateNewMessageBody: (body) => {\r\n        //     dispatch(updateNewMessageBodyCreator(body));\r\n        // },\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);\r\n// export default DialogsContainer;\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs);"],"sourceRoot":""}