{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","MyPosts","React","memo","postsElements","posts","map","p","id","postsBlock","onSubmit","values","addPost","newPostText","maxLengt10","maxLengthCreator","AddNewPostForm","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","reduxForm","form","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","Component","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataFormReduxForm","profile","error","styles","formSummaryError","createField","Input","type","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","alt","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.931843fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"topPicture\":\"ProfileInfo_topPicture__1siuB\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2jRH7\",\"mainPhoto\":\"ProfileInfo_mainPhoto__tcT3D\",\"contact\":\"ProfileInfo_contact__2Ixkg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3oIfU\",\"posts\":\"MyPosts_posts__3YoPA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__SnwO0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topPicture\":\"Profile_topPicture__SJbSF\"};","import s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://5mod.ru/uploads/posts/2020-12/1607051489_1607051535.png' />\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, { PureComponent } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../Common/FormControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\nconst MyPosts = React.memo( (props) => {\r\n    let postsElements = props.posts.map( p => <Post key={p.id} message={p.message} likesCount={p.likesCount} /> );\r\n    let newPostElement = React.createRef();\r\n    let onAddPost = (values) => {props.addPost(values.newPostText);}\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n// class MyPosts extends PureComponent {\r\n//     // shouldComponentUpdate(nextProps, nextState) {\r\n//     //     return nextProps != this.props || nextState != this.state;\r\n//     // }\r\n//     render() {\r\n//     let postsElements = this.props.posts.map( p => <Post message={p.message} likesCount={p.likesCount} /> );\r\n//     let newPostElement = React.createRef();\r\n//     let onAddPost = (values) => {this.props.addPost(values.newPostText);}\r\n\r\n//     return (\r\n//         <div className={s.postsBlock}>\r\n//             <h3>My posts</h3>\r\n//             <AddNewPostForm onSubmit={onAddPost} />\r\n//             <div className={s.posts}>\r\n//                 {postsElements}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n//     }\r\n// }\r\n\r\nconst maxLengt10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newPostText' component={Textarea} placeholder={'Post message'}\r\n                validate={[required, maxLengt10]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'}) (AddNewPostForm);\r\n\r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // updateNewPostText: (text) => {\r\n        //     let action = updateNewPostTextActionCreator(text);\r\n        //     dispatch(action);\r\n        // },\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    // let stateWithSetState = useState(false);\r\n    // let editMode = stateWithSetState[0];\r\n    // let setEditMode = stateWithSetState[1];\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    \r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    \r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <b>Status:</b> <span onDoubleClick={ activateEditMode }>{props.status || '-----'} </span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange} value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState ({\r\n        status: e.currentTarget.value\r\n    });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={ this.activateEditMode }>{this.props.status || '-----'}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={ this.deactivateEditMode } value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import { reduxForm } from \"redux-form\";\r\nimport { createField, Input, Textarea } from \"../../Common/FormControls/FormsControls\";\r\nimport s from './ProfileInfo.module.css';\r\nimport styles from '../../Common/FormControls/FormsControls.module.css'\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        \r\n        { error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div> }\r\n\r\n        <div><b>Full name:</b> {createField('Full name', 'fullName', [], Input)}</div>\r\n        <div><b>About me:</b> {createField('About me', 'aboutMe', [], Textarea)}</div>\r\n        <div><b>Looking for a job:</b> {createField('', 'lookingForAJob', [], Input, {type:'checkbox'})}</div>\r\n        <div><b>My professional skills:</b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}</div>\r\n        \r\n        <div><b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n            </div>\r\n        })}</div>\r\n        \r\n        {/* <div><b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n        })}</div> */}\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'}) (ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = (props) => {\r\n    \r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    // const onSubmit = async (formData) => {\r\n    //    await props.saveProfile(formData);\r\n    //     setEditMode(false);\r\n    // }\r\n    \r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(\r\n            () => {setEditMode(false);}\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <div className={s.topPicture}>\r\n                <img src='http://cdn.cnn.com/cnnnext/dam/assets/181010131059-australia-best-beaches-cossies-beach-cocos3.jpg' />\r\n            </div> */}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\" />\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n\r\n                { editMode \r\n                    ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/> \r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={props.profile} isOwner={props.isOwner}/> }\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div><b>Full name:</b> {profile.fullName}</div>\r\n        <div><b>About me:</b> {profile.aboutMe}</div>\r\n        <div><b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n        {profile.lookingForAJob &&\r\n            <div><b>My professional skills:</b> {profile.lookingForAJobDescription}</div>\r\n        }\r\n        <div><b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n        })}</div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contact}><b>{contactTitle}:</b> {contactValue}</div>\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import MyPosts from './MyPosts/MyPosts';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto} \r\n                         isOwner={props.isOwner} \r\n                         profile={props.profile} \r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n            {/* <MyPostsContainer store={props.store}/> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getStatus, getUserProfile, savePhoto, saveProfile, updateStatus } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto} />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n// let WithUrlDataContaierComponent = withRouter(AuthRedirectComponent);\r\n// export default connect(mapStateToProps, {getUserProfile}) (WithUrlDataContaierComponent);"],"sourceRoot":""}